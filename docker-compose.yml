version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blendsk_app
    ports:
      - "80:80"
    volumes:
      - ./public:/var/www/html/public
      - ./var:/var/www/html/var
    environment:
      APP_ENV: ${APP_ENV:-prod}
      DATABASE_URL: ${DATABASE_URL}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_PASSPHRASE: ${JWT_PASSPHRASE}
      MAILER_DSN: ${MAILER_DSN}

    depends_on:
      db:
        condition: service_healthy
    networks:
      - ci_cd_network

  db:
    image: mysql:8.0
    container_name: blendsk_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-blendsk}
      MYSQL_USER: ${MYSQL_USER:-root}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - ci_cd_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s

  jenkins:
    user: root
    image: jenkins/jenkins:lts
    container_name: jenkins_server
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ci_cd_network

  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube_server
    ports:
      - "9000:9000"
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
      SONAR_WEB_JAVA_OPTS: "-Xmx512m"
      SONAR_CE_JAVA_OPTS: "-Xmx512m"
      SONAR_SEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonarqube_db/sonar
      SONARQUBE_JDBC_USERNAME: ${SONARQUBE_JDBC_USERNAME:-sonar}
      SONARQUBE_JDBC_PASSWORD: ${SONARQUBE_JDBC_PASSWORD:-sonar}
    sonarqube_db:
      condition: service_healthy
    networks:
      - ci_cd_network

  sonarqube_db:
    image: postgres:latest
    container_name: sonarqube_db_server
    environment:
      POSTGRES_USER: ${SONARQUBE_JDBC_USERNAME:-sonar}
      POSTGRES_PASSWORD: ${SONARQUBE_JDBC_PASSWORD:-sonar}
      POSTGRES_DB: sonar
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
    networks:
      - ci_cd_network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SONARQUBE_JDBC_USERNAME:-sonar}"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  db_data:
  jenkins_home:
  sonarqube_db_data:

networks:
  ci_cd_network:
